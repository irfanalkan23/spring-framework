#PostgreSQL Connection
#connection stream: url, username, password
spring.datasource.url=jdbc:postgresql://localhost:5432/cydeo
spring.datasource.username=postgres
spring.datasource.password=4223

#spring.jpa.show-sql=true
spring.jpa.show-sql=false


spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

#iot use schema2.sql and data.sql :
#spring.sql.init.mode=always

#iot create table with hibernate (@Entity, object mapping):
spring.jpa.hibernate.ddl-auto=update
#create--> drop the existing, then create
#update--> update the existing table

# iot run the data.sql first before the code.
# JAMAL; "create schema from Entities first, then run the data.sql"
#spring.jpa.defer-datasource-initialization=true

#spring.flyway.baseline-on-migrate=true
# this takes the datasource at top
# Flyway will create a baseline migration of your existing schema, ensuring that your application's
# migrations start from the current state of the database.

# but, in our case, we want Entities (schema) to be created first, then migration will start. (not usual)
# we will do a workaround: go Runner, create MigrateResult method
spring.flyway.enabled=false